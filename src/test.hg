root -> 'method':method
_ -> `\s*`

type -> 'int' / 'double' / 'bool'
name -> !type `[_a-zA-Z]\w*`
parameters -> (type name (',' type name)*)?
method -> type name '(' parameters ')' ('standard':standardBody / 'lambda':lambdaBody)
lambdaBody -> '=>' expr ';'
standardBody -> '{' statement* '}'
statement -> 'declaration':declarationStatement / 'assignment':assignmentStatement / 'return':returnStatement
declarationStatement -> type name ('=' expr)? ';'
assignmentStatement -> name '=' expr ';'
returnStatement -> 'return' expr ';'

expr ->
    [
        #WantOperand (Nullary, Prefix)
        '()'         none none '(' expr ')'
        'u+'         none 1    '+'
        'u-'         none 1    '-'
        '~'          none 1    '~'
        'real'       none none `\d+\.\d+`
        'integral'   none none `\d+`
        'boolean'    none none 'true' / 'false'
        'identifier' none none `[_a-zA-Z]\w*`

        #HaveOperand (Postfix, Infix)
        '$'          0    none '(' (expr (',' expr)*)? ')'
        '*'          3    3    '*'
        '/'          3    3    '/'
        '+'          4    4    '+'
        '-'          4    4    '-'
        '<='         5    5    '<='
        '>='         5    5    '>='
        '<'          5    5    '<'
        '>'          5    5    '>'
        '=='         6    6    '=='
        '!='         6    6    '!='
        '&'          7    7    '&'
        '^'          8    8    '^'
        '|'          9    9    '|'
        '?:'         10   99   '?' expr ':'
        '!'          2    none '!'
    ]
