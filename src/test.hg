root -> method+
_ -> `\s*`

type -> 'int' / 'double' / 'bool'
name -> !type `[_a-zA-Z]\w*`

parameters -> (type name (',' type name)*)?
method:'method' -> type name '(' parameters ')' (block_statement / lambda_body)

lambda_body:'lambda' -> '=>' expr ';'

statement ->
    declaration_statement /
    embedded_statement

declaration:'declaration' -> type name ('=' expr)?
declaration_statement:'declaration_statement' -> declaration ';'

block_statement:'block_statement' -> '{' statement* '}'
return_statement:'return_statement' -> 'return' expr ';'
expr_statement:'expr_statement' -> expr ';'

embedded_statement ->
    block_statement /
    return_statement /
    expr_statement

expr ->
    [
        #WantOperand (Nullary, Prefix)
        '()'         none none '(' expr ')'
        'u+'         none 2    '+'
        'u-'         none 2    '-'
        '~'          none 2    '~'
        'real'       none none `\d+\.\d+`
        'integral'   none none `\d+`
        'boolean'    none none 'true' / 'false'
        'identifier' none none `[_a-zA-Z]\w*`

        #HaveOperand (Postfix, Infix)
        '.'          0    0    '.'
        '$'          1    none '(' (expr (',' expr)*)? ')'
        'post++'     3    none '++'
        'post--'     3    none '--'
        '*'          4    4    '*'
        '/'          4    4    '/'
        '+'          5    5    '+'
        '-'          5    5    '-'
        '<='         6    6    '<='
        '>='         6    6    '>='
        '<'          6    6    '<'
        '>'          6    6    '>'
        '=='         7    7    '=='
        '!='         7    7    '!='
        '&'          8    8    '&'
        '^'          9    9    '^'
        '|'          10   10   '|'
        '='          1    99   '='
        '?:'         11   99   '?' expr ':'
    ]
